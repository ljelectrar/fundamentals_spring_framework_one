[33m3062872[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m Working wiht Dependency Injection 01
[33m33b9047[m ok
[33mc0a4725[m Qualifier and Constructor Injection
[33m56e5500[m Qualifier() added
[33m21d3c2b[m @Primary Annotation between Pacman and Super Contra
[33mbdaf65f[m Using @Component and @ComponentScan() Annotation
[33m7cd524f[m GammerRunner managed by Spring Context
[33m16b88a1[m Mistake removed, up() method called and only one Bean available now
[33mc799eb4[m Applying Spring Context to GameConsole.class
[33m990e80f[m Using @Qualifier Annotation
[33ma1963af[m ok, @Primary
[33m24ba11d[m Using Primary Annotation to define a main @Bean
[33m7c19c96[m Print using stream() beans definition names
[33m1b5c03c[m Differences between Java Bean, Pojo and Spring Bean
[33mabbeb95[m ok
[33m3c32906[m ok
[33m1321c0c[m Method call and Parameter Call.
[33m4ba60bf[m Naming a @Bean with annotation
[33m4dd0ebe[m Using a @Bean to manage records (a special type o .class, vide java 14).
[33mfd8210e[m Using a record, a special class type in java. Avoid some boilerplate... methods equals, hashcode and to string, constructors are automatically generated by the java compiler
[33m6938cff[m Mr bean with @Beans
[33mf26e9a2[m Mr Bean now is a @Bean managed by the Spring Context \ÂºÂº/
[33ma5eba7e[m Creating a Spring Context and a Bean (var context) and HelloWorldConfiguration @Configuration
[33m67ffee8[m Loose coupling with interfaces
[33m044ae74[m Implementing a interface step-by-step
[33m484ce8b[m GameRunner.class is tightly coupled within a Game (Super Contra or Mario)
[33mb6649d0[m Super Contra Game Added !Warning tightly coupling between classes and a lot of code modifications...
[33m1e6a097[m Writing some basic actions without an interface yet
[33m75bebff[m Ok
[33mebdda6c[m Classes Created
[33m32eca1a[m Start
